package dynamic

// Code generated by centrifuge. DO NOT EDIT.

import (
	"github.com/NX211/traefik-proxmox-provider/dynamic/tls"
	"github.com/NX211/traefik-proxmox-provider/dynamic/types"
)

type BalancerStrategy string

type Cookie struct {
	Name     string  `json:"name,omitempty"`
	Secure   bool    `json:"secure,omitempty"`
	HTTPOnly bool    `json:"httpOnly,omitempty"`
	SameSite string  `json:"sameSite,omitempty"`
	MaxAge   int     `json:"maxAge,omitempty"`
	Path     *string `json:"path,omitempty"`
	Domain   string  `json:"domain,omitempty"`
}

type Failover struct {
	Service     string       `json:"service,omitempty"`
	Fallback    string       `json:"fallback,omitempty"`
	HealthCheck *HealthCheck `json:"healthCheck,omitempty" label:"allowEmpty"`
}

type ForwardingTimeouts struct {
	DialTimeout           string `json:"dialTimeout,omitempty"`
	ResponseHeaderTimeout string `json:"responseHeaderTimeout,omitempty"`
	IdleConnTimeout       string `json:"idleConnTimeout,omitempty"`
	ReadIdleTimeout       string `json:"readIdleTimeout,omitempty"`
	PingTimeout           string `json:"pingTimeout,omitempty"`
}

type HRWService struct {
	Name   string `json:"name,omitempty"`
	Weight *int   `json:"weight,omitempty"`
}

type HTTPConfiguration struct {
	Routers           map[string]*Router           `json:"routers,omitempty"`
	Services          map[string]*Service          `json:"services,omitempty"`
	Middlewares       map[string]*Middleware       `json:"middlewares,omitempty"`
	Models            map[string]*Model            `json:"models,omitempty"`
	ServersTransports map[string]*ServersTransport `json:"serversTransports,omitempty" label:"-"`
}

type HealthCheck struct {
}

type HighestRandomWeight struct {
	Services    []HRWService `json:"services,omitempty"`
	HealthCheck *HealthCheck `json:"healthCheck,omitempty" label:"allowEmpty"`
}

type MirrorService struct {
	Name    string `json:"name,omitempty"`
	Percent int    `json:"percent,omitempty"`
}

type Mirroring struct {
	Service     string          `json:"service,omitempty"`
	MirrorBody  *bool           `json:"mirrorBody,omitempty"`
	MaxBodySize *int64          `json:"maxBodySize,omitempty"`
	Mirrors     []MirrorService `json:"mirrors,omitempty"`
	HealthCheck *HealthCheck    `json:"healthCheck,omitempty" label:"allowEmpty"`
}

type Model struct {
	Middlewares       []string                  `json:"middlewares,omitempty"`
	TLS               *RouterTLSConfig          `json:"tls,omitempty" label:"allowEmpty"`
	Observability     RouterObservabilityConfig `json:"observability,omitempty"`
	DefaultRuleSyntax string                    `json:"-" label:"-"`
}

type PassiveServerHealthCheck struct {
	FailureWindow     string `json:"failureWindow,omitempty"`
	MaxFailedAttempts int    `json:"maxFailedAttempts,omitempty"`
}

type ResponseForwarding struct {
	FlushInterval string `json:"flushInterval,omitempty"`
}

type Router struct {
	EntryPoints   []string                   `json:"entryPoints,omitempty"`
	Middlewares   []string                   `json:"middlewares,omitempty"`
	Service       string                     `json:"service,omitempty"`
	Rule          string                     `json:"rule,omitempty"`
	RuleSyntax    string                     `json:"ruleSyntax,omitempty"`
	Priority      *int                       `json:"priority,omitempty"`
	TLS           *RouterTLSConfig           `json:"tls,omitempty" label:"allowEmpty"`
	Observability *RouterObservabilityConfig `json:"observability,omitempty"`
	DefaultRule   bool                       `json:"-" label:"-"`
}

type RouterObservabilityConfig struct {
	AccessLogs     *bool  `json:"accessLogs,omitempty"`
	Metrics        *bool  `json:"metrics,omitempty"`
	Tracing        *bool  `json:"tracing,omitempty"`
	TraceVerbosity string `json:"traceVerbosity,omitempty"`
}

type RouterTLSConfig struct {
	Options      string         `json:"options,omitempty"`
	CertResolver string         `json:"certResolver,omitempty"`
	Domains      []types.Domain `json:"domains,omitempty"`
}

type Server struct {
	URL          string `json:"url,omitempty"`
	Weight       *int   `json:"weight,omitempty"`
	PreservePath bool   `json:"preservePath,omitempty"`
	Fenced       bool   `json:"fenced,omitempty" label:"-"`
	Scheme       string `json:"-"`
	Port         string `json:"-"`
}

type ServerHealthCheck struct {
	Scheme            string            `json:"scheme,omitempty"`
	Mode              string            `json:"mode,omitempty"`
	Path              string            `json:"path,omitempty"`
	Method            string            `json:"method,omitempty"`
	Status            int               `json:"status,omitempty"`
	Port              int               `json:"port,omitempty"`
	Interval          string            `json:"interval,omitempty"`
	UnhealthyInterval string            `json:"unhealthyInterval,omitempty"`
	Timeout           string            `json:"timeout,omitempty"`
	Hostname          string            `json:"hostname,omitempty"`
	FollowRedirects   *bool             `json:"followRedirects,omitempty"`
	Headers           map[string]string `json:"headers,omitempty"`
}

type ServersLoadBalancer struct {
	Sticky             *Sticky                   `json:"sticky,omitempty" label:"allowEmpty"`
	Servers            []Server                  `json:"servers,omitempty" label-slice-as-struct:"server"`
	Strategy           BalancerStrategy          `json:"strategy,omitempty"`
	HealthCheck        *ServerHealthCheck        `json:"healthCheck,omitempty"`
	PassiveHealthCheck *PassiveServerHealthCheck `json:"passiveHealthCheck,omitempty"`
	PassHostHeader     *bool                     `json:"passHostHeader"`
	ResponseForwarding *ResponseForwarding       `json:"responseForwarding,omitempty"`
	ServersTransport   string                    `json:"serversTransport,omitempty"`
}

type ServersTransport struct {
	ServerName          string              `json:"serverName,omitempty"`
	InsecureSkipVerify  bool                `json:"insecureSkipVerify,omitempty"`
	RootCAs             []string            `json:"rootCAs,omitempty"`
	Certificates        tls.Certificates    `json:"certificates,omitempty"`
	MaxIdleConnsPerHost int                 `json:"maxIdleConnsPerHost,omitempty"`
	ForwardingTimeouts  *ForwardingTimeouts `json:"forwardingTimeouts,omitempty"`
	DisableHTTP2        bool                `json:"disableHTTP2,omitempty"`
	PeerCertURI         string              `json:"peerCertURI,omitempty"`
	Spiffe              *Spiffe             `json:"spiffe,omitempty" label:"allowEmpty"`
}

type Service struct {
	LoadBalancer        *ServersLoadBalancer `json:"loadBalancer,omitempty"`
	HighestRandomWeight *HighestRandomWeight `json:"highestRandomWeight,omitempty" label:"-"`
	Weighted            *WeightedRoundRobin  `json:"weighted,omitempty" label:"-"`
	Mirroring           *Mirroring           `json:"mirroring,omitempty" label:"-"`
	Failover            *Failover            `json:"failover,omitempty" label:"-"`
}

type Spiffe struct {
	IDs         []string `json:"ids,omitempty"`
	TrustDomain string   `json:"trustDomain,omitempty"`
}

type Sticky struct {
	Cookie *Cookie `json:"cookie,omitempty" label:"allowEmpty"`
}

type WRRService struct {
	Name   string `json:"name,omitempty"`
	Weight *int   `json:"weight,omitempty"`
}

type WeightedRoundRobin struct {
	Services    []WRRService `json:"services,omitempty"`
	Sticky      *Sticky      `json:"sticky,omitempty"`
	HealthCheck *HealthCheck `json:"healthCheck,omitempty" label:"allowEmpty"`
}
